{"version":3,"file":"influxdb.min.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\nexport type WritePrecisionType = keyof typeof WritePrecision | WritePrecision\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions, Headers} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              resolve()\n            } else {\n              const error = new HttpError(\n                responseStatusCode,\n                `204 HTTP response status code expected, but ${responseStatusCode} returned`,\n                undefined,\n                '0'\n              )\n              Logger.error(`Write to InfluxDB failed.`, error)\n              reject(error)\n            }\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Logger.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers, response.status)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Returns a new query API with extra options applied.\n   * @param options - query options to use\n   * @returns queryApi instance with the supplied options\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * QueryRaw executes a query and returns the full response as a string.\n   * Use with caution, a possibly huge stream is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of response text\n   */\n  queryRaw(query: string | ParameterizedQuery): Promise<string>\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines\n  implements CommunicationObserver<Uint8Array> {\n  previous?: Uint8Array\n  finished = false\n  quoted = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    if (this.target.useCancellable) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this\n      this.target.useCancellable({\n        cancel(): void {\n          cancellable.cancel()\n          self.previous = undefined // do not emit more lines\n          self.complete()\n        },\n        isCancelled(): boolean {\n          return cancellable.isCancelled()\n        },\n      })\n    }\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!this.quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (this.finished) {\n            return\n          }\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        this.quoted = !this.quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {\n  ColumnType,\n  newFluxTableColumn,\n} from '../query/FluxTableColumn'\nimport FluxTableMetaData, {\n  createFluxTableMetaData,\n} from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string | QueryOptions) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, {...this.options, ...options})\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {\n  ClientOptions,\n  WritePrecision,\n  WriteOptions,\n  WritePrecisionType,\n} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","message","_super","setPrototypeOf","_this","IllegalArgumentError","prototype","__extends","Error","statusMessage","body","retryAfter","HttpError","setRetryAfter","test","this","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","name","AbortError","reEscape","config","wrap","patterns","keys","join","replace","_re","RegExp","Escaper","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","escaperConfig","EscaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\","tag","=","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","duration","dateTime:RFC3339","columns","forEach","col","i","FluxTableMetaDataImpl","label","values","acc","column","defaultValue","dataType","createFluxTableMetaData","FLUX_VALUE","Symbol","fluxValue","FluxParameter","isFluxParameterLike","value","sanitizeString","toString","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","val_2","_i","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","Array","isArray","map","symbolObservable","observable","measurementName","Point","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","options","success","RetryStrategyImpl","failedAttempts","delay","delay_1","currentDelay","min","max","maxLines","retryLines","RetryBuffer","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","_a","clearTimeout","maxChunkRecords","flushFn","scheduleSend","WriteBuffer","record","flush","reset","Promise","resolve","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","WriteApiImpl","attempts","self","reject","responseStatusCode","send","sendOptions","responseStarted","_headers","onRetry","call","addLines","nextDelay","complete","add","records","point","points","withRetryBuffer","finally","remaining","close","key","pureJsChunkCombiner","concat","second","Uint8Array","set","toUtf8String","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","copy","connectionOptions","defaultHeaders","token","url","endsWith","FetchTransport","path","callbacks","observer","state","data","completeCommunicationObserver","cancelled","signal","useCancellable","controller_1","AbortController","__assign","cancel","abort","isCancelled","aborted","fetch","response","headers_1","previous","push","status","text","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","_c","responseContentType","responseType","accept","json","startsWith","other","credentials","defaultRowMapping","tableMeta","toObject","target","chunks","ChunksToLines","finished","bufferReceived","cancellable","self_1","LineSplitter","_reuse","reusedValues","reuse","lastSplitLength","quoteCount","startIndex","count","val_1","getValue","toLineObserver","consumer","lastMeta","splitter","withReuse","expectMeta","firstColumnIndex","splitLine","FluxTableColumnImpl","group","executor","isClosed","QuerySubscription","noop","decorator","ObservableQuery","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","request","decorateRequest","dialect","accept-encoding","chunkCombiner","_options","TransportImpl","InfluxDB","timeout","canRetry","code","object","Boolean","strings","parts","partIndex","sanitized","sanitizeDateTime","parse","use"],"mappings":"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"}